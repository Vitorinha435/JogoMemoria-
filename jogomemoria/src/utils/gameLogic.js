// src/utils/gameLogic.js

const EMOJIS = [
  "üçé",
  "üçå",
  "üçá",
  "üçâ",
  "üçì",
  "üçí",
  "üçë",
  "üçç",
  "ü•ù",
  "ü•≠",
  "ü••",
  "üçÖ",
  "üçÜ",
  "ü•ë",
  "ü•¶",
  "ü•¨",
  "üå∂Ô∏è",
  "üåΩ",
  "ü•ï",
  "ü•î",
  "üç†",
  "ü•ê",
  "üçû",
  "ü•®",
  "üßÄ",
  "ü•ö",
  "üç≥",
  "ü•û",
  "üßá",
  "ü•ì",
  "ü•©",
  "üçó",
  "üçñ",
  "ü¶¥",
  "üå≠",
  "üçî",
  "üçü",
  "üçï",
  "ü•™",
  "ü•ô",
  "üßÜ",
  "üåÆ",
  "üåØ",
  "ü•ó",
  "ü•ò",
  "ü•´",
  "üçù",
  "üçú",
  "üç≤",
  "üçõ",
  "üç£",
  "üç±",
  "ü•ü",
  "üç§",
  "üçô",
  "üçö",
  "üçò",
  "üç•",
  "ü•†",
  "ü•Æ",
  "üç¢",
  "üç°",
  "üçß",
  "üç®",
  "üç¶",
  "ü•ß",
  "üßÅ",
  "üç∞",
  "üéÇ",
  "üçÆ",
  "üç≠",
  "üç¨",
  "üç´",
  "üçø",
  "üç©",
  "üç™",
  "üå∞",
  "ü•ú",
  "üçØ",
  "ü•õ",
  "üçº",
  "‚òï",
  "üçµ",
  "üßÉ",
  "ü•§",
  "üç∂",
  "üç∫",
  "üçª",
  "ü•Ç",
  "üç∑",
  "ü•É",
  "üç∏",
  "üçπ",
  "üßâ",
  "üçæ",
  "üßä",
  "ü•Ñ",
  "üç¥",
  "üçΩÔ∏è",
  "ü•£",
  "ü•°",
  "ü•¢",
  "üßÇ",
];

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

/**
 * Define o n√∫mero de pares para cada n√≠vel, seguindo N x N (N par).
 * N√≠vel 1: 2x2 = 4 cartas = 2 pares
 * N√≠vel 2: 4x4 = 16 cartas = 8 pares
 * N√≠vel 3: 6x6 = 36 cartas = 18 pares
 * ... e assim por diante
 * @param {number} level O n√≠vel do jogo.
 * @returns {number} O n√∫mero de pares de cartas.
 */
const getNumPairsForLevel = (level) => {
  const dimension = level * 2; // N√≠vel 1 -> 2x2, N√≠vel 2 -> 4x4, N√≠vel 3 -> 6x6
  return (dimension * dimension) / 2; // Total de cartas / 2
};

// --- Fun√ß√£o getGridDimensions adicionada para ajudar o GameBoard ---
/**
 * Retorna as dimens√µes do grid para um determinado n√≠vel.
 * @param {number} level O n√≠vel do jogo.
 * @returns {{rows: number, cols: number}} As dimens√µes do grid.
 */
export const getGridDimensions = (level) => {
  const dimension = level * 2; // N√≠vel 1 -> 2, N√≠vel 2 -> 4, N√≠vel 3 -> 6
  return { rows: dimension, cols: dimension };
};
// --- Fim da fun√ß√£o adicionada ---

export const generateCards = (level) => {
  const numPairs = getNumPairsForLevel(level);
  const numCards = numPairs * 2;

  console.log(
    `Generating cards for level ${level}: ${numPairs} pairs, ${numCards} total cards.`
  );

  if (numPairs > EMOJIS.length) {
    console.warn(
      `N√£o h√° emojis suficientes (${EMOJIS.length}) para ${numPairs} pares no n√≠vel ${level}!`
    );
    // Poderia retornar um erro ou limitar os emojis
    // Por enquanto, vamos usar emojis repetidos se necess√°rio
    const neededEmojis = [];
    let emojisCopy = [...EMOJIS];
    for (let i = 0; i < numPairs; i++) {
      if (emojisCopy.length === 0) emojisCopy = [...EMOJIS]; // Reinicia se acabarem os emojis
      neededEmojis.push(emojisCopy.pop());
    }
    const selectedEmojis = shuffleArray(neededEmojis);

    // return []; // Descomente se preferir parar o jogo
  } else {
    selectedEmojis = shuffleArray([...EMOJIS]).slice(0, numPairs);
  }

  const cardPairs = selectedEmojis.flatMap((emoji, index) => [
    {
      id: `${level}-${index}a`,
      content: emoji,
      isFlipped: false,
      isMatched: false,
    },
    {
      id: `${level}-${index}b`,
      content: emoji,
      isFlipped: false,
      isMatched: false,
    },
  ]);

  const shuffledCards = shuffleArray(cardPairs);
  console.log(
    "Generated cards:",
    shuffledCards.map((c) => ({ id: c.id, content: c.content }))
  );
  return shuffledCards;
};

export const getTimeLimit = (level) => {
  const numPairs = getNumPairsForLevel(level);
  // Ajuste a f√≥rmula do tempo como preferir
  // Exemplo: 5 segundos por par + 10 segundos base, aumentando a dificuldade
  const baseTimePerPair = 5;
  const baseTime = 10;
  return numPairs * baseTimePerPair + baseTime;
};
